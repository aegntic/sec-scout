import React, { useState } from 'react';
import { 
  Box, 
  Card, 
  CardContent, 
  Typography, 
  Tabs, 
  Tab, 
  Divider, 
  Chip, 
  Link, 
  Button,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableRow,
  Paper,
  TextField
} from '@mui/material';
import { useTheme } from '@mui/material/styles';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import BugReportIcon from '@mui/icons-material/BugReport';
import SecurityIcon from '@mui/icons-material/Security';
import ShieldIcon from '@mui/icons-material/Shield';
import CodeIcon from '@mui/icons-material/Code';
import VerifiedUserIcon from '@mui/icons-material/VerifiedUser';
import LockOpenIcon from '@mui/icons-material/LockOpen';
import TimerIcon from '@mui/icons-material/Timer';
import AssessmentIcon from '@mui/icons-material/Assessment';
import FileCopyIcon from '@mui/icons-material/FileCopy';
import EditIcon from '@mui/icons-material/Edit';
import InfoIcon from '@mui/icons-material/Info';
import CallMadeIcon from '@mui/icons-material/CallMade';

import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { dracula } from 'react-syntax-highlighter/dist/esm/styles/prism';

const severityIcons = {
  critical: <LockOpenIcon color="error" />,
  high: <LockOpenIcon color="error" />,
  medium: <BugReportIcon color="warning" />,
  low: <SecurityIcon color="info" />,
  info: <InfoIcon color="info" />
};

const VulnerabilityDetails = ({ vulnerability, onClose }) => {
  const theme = useTheme();
  const [tabValue, setTabValue] = useState(0);
  const [noteContent, setNoteContent] = useState('');

  // Handle tab change
  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };

  // Mock function for CWE lookup
  const getCWEInfo = (cweId) => {
    const cweDatabase = {
      '79': {
        name: 'Improper Neutralization of Input During Web Page Generation',
        description: 'The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.'
      },
      '89': {
        name: 'Improper Neutralization of Special Elements used in an SQL Command',
        description: 'The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command.'
      },
      '22': {
        name: 'Improper Limitation of a Pathname to a Restricted Directory',
        description: 'The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location outside of that directory.'
      },
      '352': {
        name: 'Cross-Site Request Forgery (CSRF)',
        description: 'The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.'
      }
    };
    
    return cweDatabase[cweId] || { 
      name: `CWE-${cweId}`, 
      description: 'No detailed information available for this CWE.'
    };
  };

  // Generate severity color
  const getSeverityColor = (severity) => {
    const colors = {
      critical: theme.palette.error.main,
      high: theme.palette.error.light,
      medium: theme.palette.warning.main,
      low: theme.palette.info.main,
      info: theme.palette.grey[500]
    };
    
    return colors[severity] || theme.palette.grey[500];
  };

  // Mock function to copy to clipboard
  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
    // In a real app, you would show a notification
    console.log('Copied to clipboard:', text);
  };

  // Get CWE information
  const cweInfo = vulnerability.cwe_id ? getCWEInfo(vulnerability.cwe_id) : null;

  // Parse request/response if available
  const request = vulnerability.request_data || {};
  const response = vulnerability.response_data || {};

  return (
    <Card sx={{ 
      maxWidth: '100%', 
      mb: 3, 
      boxShadow: `0 8px 32px rgba(0, 0, 0, 0.2)`,
      borderLeft: `4px solid ${getSeverityColor(vulnerability.severity)}` 
    }}>
      <CardContent sx={{ p: 0 }}>
        {/* Header Section */}
        <Box sx={{ 
          p: 3, 
          borderBottom: `1px solid ${theme.palette.divider}`,
          background: 'linear-gradient(to right, rgba(0,0,0,0.05), rgba(0,0,0,0))'
        }}>
          <Box sx={{ display: 'flex', alignItems: 'flex-start', justifyContent: 'space-between' }}>
            <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>
              <Box sx={{ 
                mr: 2, 
                p: 1.5, 
                borderRadius: '50%', 
                bgcolor: `${getSeverityColor(vulnerability.severity)}20`,
                color: getSeverityColor(vulnerability.severity)
              }}>
                {severityIcons[vulnerability.severity] || <BugReportIcon />}
              </Box>
              
              <Box>
                <Typography variant="h5" component="h2" gutterBottom>
                  {vulnerability.title}
                </Typography>
                
                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 1 }}>
                  <Chip 
                    label={vulnerability.severity.toUpperCase()} 
                    size="small" 
                    sx={{ 
                      bgcolor: getSeverityColor(vulnerability.severity),
                      color: '#fff',
                      fontWeight: 'bold'
                    }} 
                  />
                  
                  {vulnerability.cwe_id && (
                    <Chip 
                      icon={<CodeIcon fontSize="small" />}
                      label={`CWE-${vulnerability.cwe_id}`} 
                      size="small"
                      color="primary"
                      variant="outlined"
                      component={Link}
                      href={`https://cwe.mitre.org/data/definitions/${vulnerability.cwe_id}.html`}
                      target="_blank"
                      clickable
                    />
                  )}
                  
                  {vulnerability.confidence && (
                    <Chip 
                      icon={<VerifiedUserIcon fontSize="small" />}
                      label={`Confidence: ${Math.round(vulnerability.confidence * 100)}%`} 
                      size="small"
                      color={vulnerability.confidence > 0.7 ? "success" : "warning"}
                      variant="outlined"
                    />
                  )}
                  
                  <Chip 
                    icon={<AssessmentIcon fontSize="small" />}
                    label={vulnerability.vulnerability_type || vulnerability.category || "Vulnerability"} 
                    size="small"
                    color="secondary"
                    variant="outlined"
                  />
                  
                  {vulnerability.cvss_score && (
                    <Chip 
                      icon={<TimerIcon fontSize="small" />}
                      label={`CVSS: ${vulnerability.cvss_score}`} 
                      size="small"
                      color={vulnerability.cvss_score >= 7 ? "error" : 
                            vulnerability.cvss_score >= 4 ? "warning" : "info"}
                      variant="outlined"
                    />
                  )}
                </Box>
                
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <Typography variant="body2" color="text.secondary" sx={{ wordBreak: 'break-all' }}>
                    {vulnerability.location}
                  </Typography>
                  
                  <IconButton 
                    size="small" 
                    onClick={() => copyToClipboard(vulnerability.location)}
                    aria-label="Copy URL"
                    sx={{ ml: 1, color: 'text.secondary' }}
                  >
                    <FileCopyIcon fontSize="small" />
                  </IconButton>
                  
                  <IconButton 
                    size="small" 
                    aria-label="Open URL"
                    href={vulnerability.location}
                    target="_blank"
                    component={Link}
                    sx={{ ml: 1, color: 'primary.main' }}
                  >
                    <CallMadeIcon fontSize="small" />
                  </IconButton>
                </Box>
              </Box>
            </Box>
            
            {onClose && (
              <Button 
                variant="outlined" 
                color="primary" 
                size="small"
                onClick={onClose}
              >
                Close
              </Button>
            )}
          </Box>
        </Box>
        
        {/* Tabs Section */}
        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
          <Tabs 
            value={tabValue} 
            onChange={handleTabChange} 
            variant="scrollable"
            scrollButtons="auto"
            allowScrollButtonsMobile
            sx={{ px: 2 }}
          >
            <Tab label="Overview" icon={<InfoIcon />} iconPosition="start" />
            <Tab label="Technical Details" icon={<CodeIcon />} iconPosition="start" />
            <Tab label="Request/Response" icon={<CallMadeIcon />} iconPosition="start" />
            <Tab label="Remediation" icon={<ShieldIcon />} iconPosition="start" />
            {vulnerability.cwe_id && (
              <Tab label={`CWE-${vulnerability.cwe_id}`} icon={<BugReportIcon />} iconPosition="start" />
            )}
            <Tab label="Notes" icon={<EditIcon />} iconPosition="start" />
          </Tabs>
        </Box>
        
        {/* Tab Content */}
        <Box sx={{ p: 3 }}>
          {/* Overview Tab */}
          {tabValue === 0 && (
            <Box>
              <Typography variant="body1" paragraph>
                {vulnerability.description}
              </Typography>
              
              {vulnerability.impact && (
                <>
                  <Typography variant="subtitle1" sx={{ fontWeight: 600, mt: 2 }}>
                    Impact
                  </Typography>
                  <Typography variant="body2" paragraph>
                    {vulnerability.impact}
                  </Typography>
                </>
              )}
              
              {vulnerability.evidence && (
                <>
                  <Typography variant="subtitle1" sx={{ fontWeight: 600, mt: 2 }}>
                    Evidence
                  </Typography>
                  <Paper 
                    variant="outlined" 
                    sx={{ 
                      p: 2, 
                      mt: 1, 
                      bgcolor: 'background.paper', 
                      fontFamily: 'monospace',
                      overflowX: 'auto'
                    }}
                  >
                    <Typography variant="body2" component="pre" sx={{ whiteSpace: 'pre-wrap', wordBreak: 'break-all' }}>
                      {vulnerability.evidence}
                    </Typography>
                  </Paper>
                </>
              )}
              
              {vulnerability.references && vulnerability.references.length > 0 && (
                <>
                  <Typography variant="subtitle1" sx={{ fontWeight: 600, mt: 2 }}>
                    References
                  </Typography>
                  <ul>
                    {vulnerability.references.map((ref, index) => (
                      <li key={index}>
                        <Link href={ref.url} target="_blank" sx={{ display: 'inline-flex', alignItems: 'center' }}>
                          {ref.title || ref.url}
                          <CallMadeIcon fontSize="small" sx={{ ml: 0.5, fontSize: 16 }} />
                        </Link>
                      </li>
                    ))}
                  </ul>
                </>
              )}
            </Box>
          )}
          
          {/* Technical Details Tab */}
          {tabValue === 1 && (
            <Box>
              <TableContainer component={Paper} variant="outlined">
                <Table size="small">
                  <TableBody>
                    <TableRow>
                      <TableCell 
                        component="th" 
                        scope="row" 
                        sx={{ 
                          fontWeight: 600, 
                          width: '30%', 
                          borderRight: `1px solid ${theme.palette.divider}` 
                        }}
                      >
                        Vulnerability Type
                      </TableCell>
                      <TableCell>{vulnerability.vulnerability_type || vulnerability.category || "Unknown"}</TableCell>
                    </TableRow>
                    
                    <TableRow>
                      <TableCell 
                        component="th" 
                        scope="row" 
                        sx={{ 
                          fontWeight: 600, 
                          borderRight: `1px solid ${theme.palette.divider}` 
                        }}
                      >
                        Location
                      </TableCell>
                      <TableCell sx={{ wordBreak: 'break-all' }}>{vulnerability.location}</TableCell>
                    </TableRow>
                    
                    {vulnerability.parameter && (
                      <TableRow>
                        <TableCell 
                          component="th" 
                          scope="row" 
                          sx={{ 
                            fontWeight: 600, 
                            borderRight: `1px solid ${theme.palette.divider}` 
                          }}
                        >
                          Vulnerable Parameter
                        </TableCell>
                        <TableCell>{vulnerability.parameter}</TableCell>
                      </TableRow>
                    )}
                    
                    {vulnerability.payload && (
                      <TableRow>
                        <TableCell 
                          component="th" 
                          scope="row" 
                          sx={{ 
                            fontWeight: 600, 
                            borderRight: `1px solid ${theme.palette.divider}` 
                          }}
                        >
                          Payload Used
                        </TableCell>
                        <TableCell sx={{ wordBreak: 'break-all' }}>{vulnerability.payload}</TableCell>
                      </TableRow>
                    )}
                    
                    <TableRow>
                      <TableCell 
                        component="th" 
                        scope="row" 
                        sx={{ 
                          fontWeight: 600, 
                          borderRight: `1px solid ${theme.palette.divider}` 
                        }}
                      >
                        Severity
                      </TableCell>
                      <TableCell>
                        <Chip 
                          label={vulnerability.severity.toUpperCase()} 
                          size="small"
                          sx={{ 
                            bgcolor: getSeverityColor(vulnerability.severity),
                            color: '#fff',
                            fontWeight: 'bold'
                          }} 
                        />
                      </TableCell>
                    </TableRow>
                    
                    {vulnerability.confidence && (
                      <TableRow>
                        <TableCell 
                          component="th" 
                          scope="row" 
                          sx={{ 
                            fontWeight: 600, 
                            borderRight: `1px solid ${theme.palette.divider}` 
                          }}
                        >
                          Confidence
                        </TableCell>
                        <TableCell>{Math.round(vulnerability.confidence * 100)}%</TableCell>
                      </TableRow>
                    )}
                    
                    {vulnerability.cvss_score && (
                      <TableRow>
                        <TableCell 
                          component="th" 
                          scope="row" 
                          sx={{ 
                            fontWeight: 600, 
                            borderRight: `1px solid ${theme.palette.divider}` 
                          }}
                        >
                          CVSS Score
                        </TableCell>
                        <TableCell>{vulnerability.cvss_score}</TableCell>
                      </TableRow>
                    )}
                    
                    {vulnerability.cwe_id && (
                      <TableRow>
                        <TableCell 
                          component="th" 
                          scope="row" 
                          sx={{ 
                            fontWeight: 600, 
                            borderRight: `1px solid ${theme.palette.divider}` 
                          }}
                        >
                          CWE ID
                        </TableCell>
                        <TableCell>
                          <Link 
                            href={`https://cwe.mitre.org/data/definitions/${vulnerability.cwe_id}.html`} 
                            target="_blank"
                            sx={{ display: 'inline-flex', alignItems: 'center' }}
                          >
                            CWE-{vulnerability.cwe_id}
                            <CallMadeIcon fontSize="small" sx={{ ml: 0.5, fontSize: 16 }} />
                          </Link>
                        </TableCell>
                      </TableRow>
                    )}
                    
                    {vulnerability.timestamp && (
                      <TableRow>
                        <TableCell 
                          component="th" 
                          scope="row" 
                          sx={{ 
                            fontWeight: 600, 
                            borderRight: `1px solid ${theme.palette.divider}` 
                          }}
                        >
                          Detected At
                        </TableCell>
                        <TableCell>
                          {new Date(vulnerability.timestamp).toLocaleString()}
                        </TableCell>
                      </TableRow>
                    )}
                  </TableBody>
                </Table>
              </TableContainer>
              
              {vulnerability.attack_chain && vulnerability.attack_chain.length > 0 && (
                <Box sx={{ mt: 3 }}>
                  <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                    Attack Chain
                  </Typography>
                  <Typography variant="body2" color="text.secondary" paragraph>
                    This shows how the vulnerability could be exploited in a chain of attacks
                  </Typography>
                  
                  <Paper variant="outlined" sx={{ p: 2 }}>
                    {vulnerability.attack_chain.map((step, index) => (
                      <Box key={index} sx={{ display: 'flex', mb: 2 }}>
                        <Box 
                          sx={{ 
                            minWidth: 28, 
                            height: 28, 
                            borderRadius: '50%', 
                            bgcolor: 'primary.main',
                            color: 'white',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            fontWeight: 'bold',
                            mr: 2
                          }}
                        >
                          {index + 1}
                        </Box>
                        <Box>
                          <Typography variant="body2">{step}</Typography>
                        </Box>
                      </Box>
                    ))}
                  </Paper>
                </Box>
              )}
            </Box>
          )}
          
          {/* Request/Response Tab */}
          {tabValue === 2 && (
            <Box>
              <Accordion defaultExpanded>
                <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                  <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                    HTTP Request
                  </Typography>
                </AccordionSummary>
                <AccordionDetails>
                  {Object.keys(request).length > 0 ? (
                    <Box>
                      <TableContainer component={Paper} variant="outlined" sx={{ mb: 2 }}>
                        <Table size="small">
                          <TableBody>
                            <TableRow>
                              <TableCell 
                                component="th" 
                                scope="row" 
                                sx={{ 
                                  fontWeight: 600, 
                                  width: '20%', 
                                  borderRight: `1px solid ${theme.palette.divider}` 
                                }}
                              >
                                URL
                              </TableCell>
                              <TableCell sx={{ wordBreak: 'break-all' }}>{request.url || vulnerability.location}</TableCell>
                            </TableRow>
                            
                            <TableRow>
                              <TableCell 
                                component="th" 
                                scope="row" 
                                sx={{ 
                                  fontWeight: 600, 
                                  borderRight: `1px solid ${theme.palette.divider}` 
                                }}
                              >
                                Method
                              </TableCell>
                              <TableCell>{request.method || "GET"}</TableCell>
                            </TableRow>
                            
                            {request.headers && (
                              <TableRow>
                                <TableCell 
                                  component="th" 
                                  scope="row" 
                                  sx={{ 
                                    fontWeight: 600, 
                                    borderRight: `1px solid ${theme.palette.divider}` 
                                  }}
                                >
                                  Headers
                                </TableCell>
                                <TableCell>
                                  <SyntaxHighlighter 
                                    language="json" 
                                    style={dracula}
                                    customStyle={{ margin: 0, borderRadius: 4 }}
                                  >
                                    {JSON.stringify(request.headers, null, 2)}
                                  </SyntaxHighlighter>
                                </TableCell>
                              </TableRow>
                            )}
                            
                            {(request.body || vulnerability.payload) && (
                              <TableRow>
                                <TableCell 
                                  component="th" 
                                  scope="row" 
                                  sx={{ 
                                    fontWeight: 600, 
                                    borderRight: `1px solid ${theme.palette.divider}` 
                                  }}
                                >
                                  Body
                                </TableCell>
                                <TableCell>
                                  <SyntaxHighlighter 
                                    language="json" 
                                    style={dracula}
                                    customStyle={{ margin: 0, borderRadius: 4 }}
                                  >
                                    {request.body || vulnerability.payload || "{}"}
                                  </SyntaxHighlighter>
                                </TableCell>
                              </TableRow>
                            )}
                          </TableBody>
                        </Table>
                      </TableContainer>
                    </Box>
                  ) : (
                    <Typography variant="body2" color="text.secondary">
                      No detailed request information available.
                    </Typography>
                  )}
                </AccordionDetails>
              </Accordion>
              
              <Accordion defaultExpanded sx={{ mt: 2 }}>
                <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                  <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                    HTTP Response
                  </Typography>
                </AccordionSummary>
                <AccordionDetails>
                  {Object.keys(response).length > 0 ? (
                    <Box>
                      <TableContainer component={Paper} variant="outlined" sx={{ mb: 2 }}>
                        <Table size="small">
                          <TableBody>
                            <TableRow>
                              <TableCell 
                                component="th" 
                                scope="row" 
                                sx={{ 
                                  fontWeight: 600, 
                                  width: '20%', 
                                  borderRight: `1px solid ${theme.palette.divider}` 
                                }}
                              >
                                Status Code
                              </TableCell>
                              <TableCell>
                                {response.status_code || 200}
                                {response.status_code >= 400 && (
                                  <Chip 
                                    label="Error" 
                                    size="small" 
                                    color="error" 
                                    sx={{ ml: 1 }} 
                                  />
                                )}
                              </TableCell>
                            </TableRow>
                            
                            {response.headers && (
                              <TableRow>
                                <TableCell 
                                  component="th" 
                                  scope="row" 
                                  sx={{ 
                                    fontWeight: 600, 
                                    borderRight: `1px solid ${theme.palette.divider}` 
                                  }}
                                >
                                  Headers
                                </TableCell>
                                <TableCell>
                                  <SyntaxHighlighter 
                                    language="json" 
                                    style={dracula}
                                    customStyle={{ margin: 0, borderRadius: 4 }}
                                  >
                                    {JSON.stringify(response.headers, null, 2)}
                                  </SyntaxHighlighter>
                                </TableCell>
                              </TableRow>
                            )}
                            
                            {(response.body_excerpt || vulnerability.evidence) && (
                              <TableRow>
                                <TableCell 
                                  component="th" 
                                  scope="row" 
                                  sx={{ 
                                    fontWeight: 600, 
                                    borderRight: `1px solid ${theme.palette.divider}` 
                                  }}
                                >
                                  Body Excerpt
                                </TableCell>
                                <TableCell>
                                  <SyntaxHighlighter 
                                    language="html" 
                                    style={dracula}
                                    customStyle={{ margin: 0, borderRadius: 4 }}
                                    wrapLongLines={true}
                                  >
                                    {response.body_excerpt || vulnerability.evidence || "No response body available"}
                                  </SyntaxHighlighter>
                                </TableCell>
                              </TableRow>
                            )}
                          </TableBody>
                        </Table>
                      </TableContainer>
                    </Box>
                  ) : (
                    <Typography variant="body2" color="text.secondary">
                      No detailed response information available.
                    </Typography>
                  )}
                </AccordionDetails>
              </Accordion>
              
              {vulnerability.evidence && (
                <Accordion sx={{ mt: 2 }}>
                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                    <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                      Evidence
                    </Typography>
                  </AccordionSummary>
                  <AccordionDetails>
                    <SyntaxHighlighter 
                      language="html" 
                      style={dracula}
                      customStyle={{ margin: 0, borderRadius: 4 }}
                      wrapLongLines={true}
                    >
                      {vulnerability.evidence}
                    </SyntaxHighlighter>
                  </AccordionDetails>
                </Accordion>
              )}
            </Box>
          )}
          
          {/* Remediation Tab */}
          {tabValue === 3 && (
            <Box>
              {vulnerability.remediation ? (
                <>
                  <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                    Recommended Fix
                  </Typography>
                  <Typography variant="body1" paragraph>
                    {vulnerability.remediation}
                  </Typography>
                </>
              ) : (
                <Typography variant="body1" paragraph>
                  {vulnerability.vulnerability_type === 'xss' ? (
                    "To fix Cross-Site Scripting vulnerabilities, implement proper input validation and output encoding. Use content security policies and sanitize user inputs before rendering them in the page. Consider using libraries like DOMPurify to sanitize HTML."
                  ) : vulnerability.vulnerability_type === 'sqli' ? (
                    "To fix SQL Injection vulnerabilities, use parameterized queries or prepared statements instead of dynamic SQL construction. Never concatenate user input directly into SQL queries. Use an ORM when possible and implement proper input validation."
                  ) : vulnerability.vulnerability_type === 'rce' ? (
                    "To fix Remote Code Execution vulnerabilities, avoid executing system commands with user input. If necessary, implement a strict allowlist of permitted commands and validate all inputs. Use sandboxed environments for execution when possible."
                  ) : (
                    "To fix this vulnerability, implement proper input validation, use secure programming practices, and follow the principle of least privilege. Consider implementing security headers and keeping all dependencies updated."
                  )}
                </Typography>
              )}
              
              <Typography variant="subtitle1" sx={{ fontWeight: 600, mt: 3 }}>
                Code Examples
              </Typography>
              
              {vulnerability.vulnerability_type === 'xss' ? (
                <Box>
                  <Typography variant="body2" sx={{ mt: 2, mb: 1 }}>
                    Vulnerable code:
                  </Typography>
                  <SyntaxHighlighter 
                    language="javascript" 
                    style={dracula}
                    customStyle={{ borderRadius: 4 }}
                  >
                    {`// Unsafe rendering of user input
document.getElementById('output').innerHTML = userInput;

// Or in React:
const MyComponent = ({ userInput }) => {
  return <div dangerouslySetInnerHTML={{ __html: userInput }} />;
};`}
                  </SyntaxHighlighter>
                  
                  <Typography variant="body2" sx={{ mt: 3, mb: 1 }}>
                    Secure code:
                  </Typography>
                  <SyntaxHighlighter 
                    language="javascript" 
                    style={dracula}
                    customStyle={{ borderRadius: 4 }}
                  >
                    {`// Using text content instead of innerHTML
document.getElementById('output').textContent = userInput;

// Or sanitizing HTML:
import DOMPurify from 'dompurify';
document.getElementById('output').innerHTML = DOMPurify.sanitize(userInput);

// In React:
const MyComponent = ({ userInput }) => {
  return <div>{userInput}</div>; // React escapes content by default
};`}
                  </SyntaxHighlighter>
                </Box>
              ) : vulnerability.vulnerability_type === 'sqli' ? (
                <Box>
                  <Typography variant="body2" sx={{ mt: 2, mb: 1 }}>
                    Vulnerable code:
                  </Typography>
                  <SyntaxHighlighter 
                    language="javascript" 
                    style={dracula}
                    customStyle={{ borderRadius: 4 }}
                  >
                    {`// Unsafe SQL construction
const query = "SELECT * FROM users WHERE username = '" + username + "'";
db.execute(query);

// In PHP:
$query = "SELECT * FROM users WHERE username = '" . $_GET['username'] . "'";
$result = mysqli_query($conn, $query);`}
                  </SyntaxHighlighter>
                  
                  <Typography variant="body2" sx={{ mt: 3, mb: 1 }}>
                    Secure code:
                  </Typography>
                  <SyntaxHighlighter 
                    language="javascript" 
                    style={dracula}
                    customStyle={{ borderRadius: 4 }}
                  >
                    {`// Using parameterized queries
const query = "SELECT * FROM users WHERE username = ?";
db.execute(query, [username]);

// In PHP:
$stmt = $conn->prepare("SELECT * FROM users WHERE username = ?");
$stmt->bind_param("s", $_GET['username']);
$stmt->execute();

// Using an ORM (e.g., Sequelize):
const user = await User.findOne({ where: { username } });`}
                  </SyntaxHighlighter>
                </Box>
              ) : (
                <Typography variant="body2" color="text.secondary">
                  No specific code examples available for this vulnerability type.
                </Typography>
              )}
              
              <Typography variant="subtitle1" sx={{ fontWeight: 600, mt: 3 }}>
                Security Best Practices
              </Typography>
              <ul>
                <li>
                  <Typography variant="body2">
                    <strong>Defense in Depth:</strong> Implement multiple layers of security controls.
                  </Typography>
                </li>
                <li>
                  <Typography variant="body2">
                    <strong>Input Validation:</strong> Validate all user inputs on both client and server sides.
                  </Typography>
                </li>
                <li>
                  <Typography variant="body2">
                    <strong>Output Encoding:</strong> Encode output based on the context where it will be used.
                  </Typography>
                </li>
                <li>
                  <Typography variant="body2">
                    <strong>Content Security Policy:</strong> Implement CSP headers to mitigate XSS attacks.
                  </Typography>
                </li>
                <li>
                  <Typography variant="body2">
                    <strong>Principle of Least Privilege:</strong> Ensure components have only the access permissions they need.
                  </Typography>
                </li>
                <li>
                  <Typography variant="body2">
                    <strong>Keep Dependencies Updated:</strong> Regularly update libraries and frameworks to include security patches.
                  </Typography>
                </li>
              </ul>
              
              <Typography variant="subtitle1" sx={{ fontWeight: 600, mt: 3 }}>
                Additional Resources
              </Typography>
              <ul>
                <li>
                  <Link 
                    href="https://owasp.org/www-project-top-ten/" 
                    target="_blank"
                    sx={{ display: 'inline-flex', alignItems: 'center' }}
                  >
                    OWASP Top 10 Web Application Security Risks
                    <CallMadeIcon fontSize="small" sx={{ ml: 0.5, fontSize: 16 }} />
                  </Link>
                </li>
                <li>
                  <Link 
                    href="https://cheatsheetseries.owasp.org/" 
                    target="_blank"
                    sx={{ display: 'inline-flex', alignItems: 'center' }}
                  >
                    OWASP Cheat Sheet Series
                    <CallMadeIcon fontSize="small" sx={{ ml: 0.5, fontSize: 16 }} />
                  </Link>
                </li>
                <li>
                  <Link 
                    href="https://portswigger.net/web-security/all-materials" 
                    target="_blank"
                    sx={{ display: 'inline-flex', alignItems: 'center' }}
                  >
                    PortSwigger Web Security Academy
                    <CallMadeIcon fontSize="small" sx={{ ml: 0.5, fontSize: 16 }} />
                  </Link>
                </li>
              </ul>
            </Box>
          )}
          
          {/* CWE Tab */}
          {tabValue === 4 && vulnerability.cwe_id && cweInfo && (
            <Box>
              <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                {cweInfo.name}
              </Typography>
              
              <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                CWE-{vulnerability.cwe_id}
                {' '}
                <Link 
                  href={`https://cwe.mitre.org/data/definitions/${vulnerability.cwe_id}.html`} 
                  target="_blank"
                  sx={{ display: 'inline-flex', alignItems: 'center' }}
                >
                  View on MITRE CWE
                  <CallMadeIcon fontSize="small" sx={{ ml: 0.5, fontSize: 16 }} />
                </Link>
              </Typography>
              
              <Divider sx={{ my: 2 }} />
              
              <Typography variant="subtitle2" sx={{ fontWeight: 600 }}>
                Description
              </Typography>
              <Typography variant="body2" paragraph>
                {cweInfo.description}
              </Typography>
              
              <Typography variant="subtitle2" sx={{ fontWeight: 600, mt: 2 }}>
                Common Consequences
              </Typography>
              <Typography variant="body2" paragraph>
                This type of vulnerability typically leads to:
              </Typography>
              <ul>
                {vulnerability.vulnerability_type === 'xss' ? (
                  <>
                    <li>
                      <Typography variant="body2">
                        <strong>Confidentiality:</strong> The attacker can access sensitive browser data, such as cookies or session tokens.
                      </Typography>
                    </li>
                    <li>
                      <Typography variant="body2">
                        <strong>Integrity:</strong> The attacker can modify the contents of the page presented to the user.
                      </Typography>
                    </li>
                    <li>
                      <Typography variant="body2">
                        <strong>Access Control:</strong> The attacker can perform actions with the user's privileges.
                      </Typography>
                    </li>
                  </>
                ) : vulnerability.vulnerability_type === 'sqli' ? (
                  <>
                    <li>
                      <Typography variant="body2">
                        <strong>Confidentiality:</strong> The attacker can read sensitive data from the database.
                      </Typography>
                    </li>
                    <li>
                      <Typography variant="body2">
                        <strong>Integrity:</strong> The attacker can modify database data.
                      </Typography>
                    </li>
                    <li>
                      <Typography variant="body2">
                        <strong>Availability:</strong> The attacker can delete records or drop tables, causing denial of service.
                      </Typography>
                    </li>
                  </>
                ) : (
                  <li>
                    <Typography variant="body2">
                      <strong>Various security impacts</strong> depending on the specific vulnerability.
                    </Typography>
                  </li>
                )}
              </ul>
              
              <Typography variant="subtitle2" sx={{ fontWeight: 600, mt: 2 }}>
                Related CWEs
              </Typography>
              <ul>
                {vulnerability.vulnerability_type === 'xss' ? (
                  <>
                    <li>
                      <Link href="https://cwe.mitre.org/data/definitions/80.html" target="_blank">
                        CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page
                      </Link>
                    </li>
                    <li>
                      <Link href="https://cwe.mitre.org/data/definitions/83.html" target="_blank">
                        CWE-83: Improper Neutralization of Script in Attributes in a Web Page
                      </Link>
                    </li>
                    <li>
                      <Link href="https://cwe.mitre.org/data/definitions/87.html" target="_blank">
                        CWE-87: Improper Neutralization of Alternate XSS Syntax
                      </Link>
                    </li>
                  </>
                ) : vulnerability.vulnerability_type === 'sqli' ? (
                  <>
                    <li>
                      <Link href="https://cwe.mitre.org/data/definitions/564.html" target="_blank">
                        CWE-564: SQL Injection: Hibernate
                      </Link>
                    </li>
                    <li>
                      <Link href="https://cwe.mitre.org/data/definitions/943.html" target="_blank">
                        CWE-943: Improper Neutralization of Special Elements in Data Query Logic
                      </Link>
                    </li>
                  </>
                ) : (
                  <li>
                    <Typography variant="body2" color="text.secondary">
                      No specific related CWEs defined for this vulnerability type.
                    </Typography>
                  </li>
                )}
              </ul>
            </Box>
          )}
          
          {/* Notes Tab */}
          {tabValue === 5 && (
            <Box>
              <Typography variant="subtitle1" sx={{ mb: 2 }}>
                Add Notes
              </Typography>
              
              <TextField
                label="Security Notes"
                multiline
                rows={4}
                fullWidth
                value={noteContent}
                onChange={(e) => setNoteContent(e.target.value)}
                placeholder="Add your notes about this vulnerability..."
                variant="outlined"
                sx={{ mb: 2 }}
              />
              
              <Button 
                variant="contained" 
                color="primary"
                disabled={!noteContent.trim()}
                sx={{ mr: 1 }}
              >
                Save Note
              </Button>
              
              <Button 
                variant="outlined" 
                color="secondary"
                onClick={() => setNoteContent('')}
                disabled={!noteContent.trim()}
              >
                Clear
              </Button>
              
              <Divider sx={{ my: 3 }} />
              
              <Typography variant="subtitle1">
                Saved Notes
              </Typography>
              
              <Typography variant="body2" color="text.secondary" sx={{ my: 2 }}>
                No notes have been saved for this vulnerability yet.
              </Typography>
            </Box>
          )}
        </Box>
      </CardContent>
    </Card>
  );
};

// For convenience, we'll export this component
export const IconButton = ({ children, ...props }) => {
  return (
    <Button
      size="small"
      variant="text"
      sx={{ 
        minWidth: 'auto', 
        p: 0.5 
      }}
      {...props}
    >
      {children}
    </Button>
  );
};

export default VulnerabilityDetails;